From 45d7e78375a0f3cabe16a2c41cc055f11f731428 Mon Sep 17 00:00:00 2001
From: Aurelio Colosimo <aurelio@aureliocolosimo.it>
Date: Wed, 13 May 2015 10:57:37 +0200
Subject: [PATCH 01/83] Linino files from openwrt target/linux/ar71xx/files

git commit 780f7ebeb5
git repository: https://github.com/linino/linino_CC.git

Signed-off-by: Aurelio Colosimo <aurelio@aureliocolosimo.it>
---
 arch/mips/ath79/mach-linino-chiwawa.c          |  11 +
 arch/mips/ath79/mach-linino-chowchow.c         | 241 ++++++++++++++++++++
 arch/mips/ath79/mach-linino-freedog.c          |  11 +
 arch/mips/ath79/mach-linino-yun.c              |  13 ++
 arch/mips/ath79/mach-linino.c                  | 297 +++++++++++++++++++++++++
 arch/mips/include/asm/mach-ath79/mach-linino.h |  84 +++++++
 6 files changed, 657 insertions(+)
 create mode 100644 arch/mips/ath79/mach-linino-chiwawa.c
 create mode 100644 arch/mips/ath79/mach-linino-chowchow.c
 create mode 100644 arch/mips/ath79/mach-linino-freedog.c
 create mode 100644 arch/mips/ath79/mach-linino-yun.c
 create mode 100644 arch/mips/ath79/mach-linino.c
 create mode 100644 arch/mips/include/asm/mach-ath79/mach-linino.h

diff --git a/arch/mips/ath79/mach-linino-chiwawa.c b/arch/mips/ath79/mach-linino-chiwawa.c
new file mode 100644
index 0000000..3c73cd0
--- /dev/null
+++ b/arch/mips/ath79/mach-linino-chiwawa.c
@@ -0,0 +1,11 @@
+/*
+ * Copyright (c) dog hunter AG - Zug - CH
+ * General Public License version 2 (GPLv2)
+ * Author Federico Vaga <federicov@linino.org>
+ */
+
+#define LININO_CHIWAWA 1
+
+#include "mach-linino.c"
+
+MIPS_MACHINE(ATH79_MACH_LININO_CHIWAWA, "linino-chiwawa", "Linino Chiwawa", ds_setup);
diff --git a/arch/mips/ath79/mach-linino-chowchow.c b/arch/mips/ath79/mach-linino-chowchow.c
new file mode 100644
index 0000000..4d8524c
--- /dev/null
+++ b/arch/mips/ath79/mach-linino-chowchow.c
@@ -0,0 +1,241 @@
+/*
+ *  TP-LINK TL-WR1041 v2 board support
+ *
+ *  Copyright (C) 2010-2012 Gabor Juhos <juhosg@openwrt.org>
+ *  Copyright (C) 2011-2012 Anan Huang <axishero@foxmail.com>
+ *
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License version 2 as published
+ *  by the Free Software Foundation.
+ */
+
+#include <linux/pci.h>
+#include <linux/phy.h>
+#include <linux/platform_device.h>
+#include <linux/ath9k_platform.h>
+#include <linux/ar8216_platform.h>
+
+#include "machtypes.h"
+#include <asm/mach-ath79/ar71xx_regs.h>
+#include <asm/mach-ath79/ath79.h>
+#include <asm/mach-ath79/mach-linino.h>
+
+#include "common.h"
+#include "dev-ap9x-pci.h"
+#include "dev-eth.h"
+#include "dev-gpio-buttons.h"
+#include "dev-leds-gpio.h"
+#include "dev-m25p80.h"
+#include "dev-spi.h"
+#include "dev-usb.h"
+#include "dev-wmac.h"
+#include "machtypes.h"
+#include "gpio.h"
+#include "linux/gpio.h"
+#include <linux/spi/spi_gpio.h>
+
+#define CHOWCHOW_GPIO_MCU_RESET	0
+#define CHOWCHOW_GPIO_LED0		12
+#define CHOWCHOW_GPIO_LED1		11
+
+#define CHOWCHOW_GPIO_UART0_RX	9
+#define CHOWCHOW_GPIO_UART0_TX	10
+#define CHOWCHOW_GPIO_UART1_RX	13
+#define CHOWCHOW_GPIO_UART1_TX	14
+#define CHOWCHOW_GPIO_OE2		15
+#define CHOWCHOW_GPIO_CONF_BTN	17
+#define CHOWCHOW_GPIO_UART_POL	GPIOF_OUT_INIT_LOW
+
+#define	CHOWCHOW_GPIO_SPI_SCK	4
+#define	CHOWCHOW_GPIO_SPI_MISO	3
+#define	CHOWCHOW_GPIO_SPI_MOSI	2
+#define CHOWCHOW_GPIO_SPI_CS0	1
+
+#define CHOWCHOW_GPIO_SPI_INTERRUPT	16
+#define DS_PCIE_CALDATA_OFFSET	0x5000
+
+static struct gpio_led chowchow_leds_gpio[] __initdata = {
+	{
+		.name		= "usb",
+		.gpio		= CHOWCHOW_GPIO_LED0,
+		.active_low	= 0,
+	}, {
+		.name		= "wlan",
+		.gpio		= CHOWCHOW_GPIO_LED1,
+		.active_low	= 0,
+	}
+};
+
+static struct gpio_keys_button chowchow_gpio_keys[] __initdata = {
+	{
+		.desc		= "configuration button",
+		.type		= EV_KEY,
+		.code		= KEY_RESTART,
+		.debounce_interval = DS_KEYS_DEBOUNCE_INTERVAL,
+		.gpio		= CHOWCHOW_GPIO_CONF_BTN,
+		.active_low	= 1,
+	}
+};
+
+static struct ar8327_pad_cfg db120_ar8327_pad0_cfg = {
+	.mode = AR8327_PAD_MAC_RGMII,
+	.txclk_delay_en = true,
+	.rxclk_delay_en = true,
+	.txclk_delay_sel = AR8327_CLK_DELAY_SEL1,
+	.rxclk_delay_sel = AR8327_CLK_DELAY_SEL2,
+};
+
+static struct ar8327_platform_data db120_ar8327_data = {
+	.pad0_cfg = &db120_ar8327_pad0_cfg,
+	.port0_cfg = {
+		.force_link = 1,
+		.speed = AR8327_PORT_SPEED_1000,
+		.duplex = 1,
+		.txpause = 1,
+		.rxpause = 1,
+	}
+};
+
+static struct mdio_board_info db120_mdio0_info[] = {
+	{
+		.bus_id = "ag71xx-mdio.0",
+		.phy_addr = 0,
+		.platform_data = &db120_ar8327_data,
+	},
+};
+
+/* * * * * * * * * * * * * * * * * * * SPI * * * * * * * * * * * * * * * * * */
+
+/*
+ * The SPI bus between the main processor and the MCU is available only in the
+ * following board: YUN, FREEDOG
+ */
+
+static struct spi_gpio_platform_data spi_bus1 = {
+	.sck = CHOWCHOW_GPIO_SPI_SCK,
+	.mosi = CHOWCHOW_GPIO_SPI_MOSI,
+	.miso = CHOWCHOW_GPIO_SPI_MISO,
+	.num_chipselect = LININO_N_SPI_CHIP_SELECT,
+};
+
+static struct platform_device linino_spi1_device = {
+	.name	= "spi_gpio",
+	.id	= 1,
+	.dev.platform_data = &spi_bus1,
+};
+
+/* SPI devices on Linino */
+static struct spi_board_info linino_spi_info[] = {
+	/*{
+		.bus_num		= 1,
+		.chip_select		= 0,
+		.max_speed_hz		= 10000000,
+		.mode			= 0,
+		.modalias		= "spidev",
+		.controller_data	= (void *) SPI_CHIP_SELECT,
+	},*/
+	{
+		.bus_num		= 1,
+		.chip_select		= 0,
+		.max_speed_hz		= 10000000, /* unused but required */
+		.mode			= 0,
+		.modalias		= "atmega32u4",
+		.controller_data	= (void *) CHOWCHOW_GPIO_SPI_CS0,
+		.platform_data		= (void *) CHOWCHOW_GPIO_SPI_INTERRUPT,
+	},
+};
+
+/**
+ * Enable the software SPI controller emulated by GPIO signals
+ */
+static void ds_register_spi(void) {
+	pr_info("mach-linino: enabling GPIO SPI Controller");
+
+	/* Enable level shifter on SPI signals */
+	gpio_set_value(CHOWCHOW_GPIO_OE2, 1);
+	/* Register SPI devices */
+	spi_register_board_info(linino_spi_info, ARRAY_SIZE(linino_spi_info));
+	/* Register GPIO SPI controller */
+	platform_device_register(&linino_spi1_device);
+}
+
+/*
+ * Enable level shifters
+ */
+static void __init ds_setup_level_shifter_oe(void)
+{
+	int err;
+
+	/* enable OE2 of level shifter */
+    pr_info("Setting GPIO OE %d\n", CHOWCHOW_GPIO_OE2);
+    err= gpio_request_one(CHOWCHOW_GPIO_OE2,
+			GPIOF_OUT_INIT_LOW | GPIOF_EXPORT_DIR_FIXED, "OE");
+	if (err)
+		pr_err("mach-linino: error setting GPIO OE\n");
+}
+
+
+static void __init chowchow_setup(void)
+{
+	u8 *art = (u8 *) KSEG1ADDR(0x1fff0000);
+	static u8 mac[6];
+
+	/* make lan / wan leds software controllable */
+	ath79_gpio_output_select(CHOWCHOW_GPIO_LED0, AR934X_GPIO_OUT_GPIO);
+	ath79_gpio_output_select(CHOWCHOW_GPIO_LED1, AR934X_GPIO_OUT_GPIO);
+
+	/* enable reset button */
+	ath79_gpio_output_select(CHOWCHOW_GPIO_CONF_BTN, AR934X_GPIO_OUT_GPIO);
+	ath79_gpio_function_enable(AR934X_GPIO_FUNC_JTAG_DISABLE);
+	ath79_gpio_output_select(CHOWCHOW_GPIO_SPI_SCK, AR934X_GPIO_OUT_GPIO);
+	ath79_gpio_output_select(CHOWCHOW_GPIO_SPI_MISO, AR934X_GPIO_OUT_GPIO);
+	ath79_gpio_output_select(CHOWCHOW_GPIO_SPI_MOSI, AR934X_GPIO_OUT_GPIO);
+	ath79_gpio_output_select(CHOWCHOW_GPIO_MCU_RESET, AR934X_GPIO_OUT_GPIO);
+
+	ath79_register_m25p80(NULL);
+
+	ath79_register_leds_gpio(-1, ARRAY_SIZE(chowchow_leds_gpio),
+			chowchow_leds_gpio);
+	ath79_register_gpio_keys_polled(-1, DS_KEYS_POLL_INTERVAL,
+					 ARRAY_SIZE(chowchow_gpio_keys),
+					 chowchow_gpio_keys);
+	pr_info("mach-linino: enabling USB Controller");
+	ath79_register_usb();
+
+	ath79_init_mac(mac, art + DS_WMAC_MAC_OFFSET, 0);
+	mac[3] |= 0x08;
+	ath79_register_wmac(art + DS_CALDATA_OFFSET, mac);
+	pr_info("%s-%d: wlan0 MAC:%02x:%02x:%02x:%02x:%02x:%02x\n", __FUNCTION__, __LINE__, mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
+
+	mac[3] &= 0xF7;
+	pr_info("%s-%d: eth0  MAC:%02x:%02x:%02x:%02x:%02x:%02x\n", __FUNCTION__, __LINE__, mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
+	ap91_pci_init(art + DS_PCIE_CALDATA_OFFSET, mac);
+	ath79_init_mac(ath79_eth0_data.mac_addr, mac, 0);
+
+	ath79_setup_ar934x_eth_cfg(AR934X_ETH_CFG_RGMII_GMAC0 |
+				   AR934X_ETH_CFG_SW_ONLY_MODE);
+
+	ath79_register_mdio(1, 0x0);
+	ath79_register_mdio(0, 0x0);
+
+	mdiobus_register_board_info(db120_mdio0_info,
+				    ARRAY_SIZE(db120_mdio0_info));
+
+	printk(KERN_DEBUG "chow: Register Eth0\n");
+
+	/* GMAC0 is connected to an AR8327 switch */
+	ath79_eth0_data.phy_if_mode = PHY_INTERFACE_MODE_RGMII;
+	ath79_eth0_data.phy_mask = BIT(0);
+	ath79_eth0_data.mii_bus_dev = &ath79_mdio0_device.dev;
+	ath79_eth0_pll_data.pll_1000 = 0x06000000;
+	ath79_register_eth(0);
+
+	/* enable OE of level shifters */
+	ds_setup_level_shifter_oe();
+
+	/* Register Software SPI controller */
+	ds_register_spi();
+}
+
+MIPS_MACHINE(ATH79_MACH_LININO_LEI, "linino-lei", "Linino Lei", chowchow_setup);
+MIPS_MACHINE(ATH79_MACH_LININO_TIAN, "linino-tian", "Arduino Tian", chowchow_setup);
diff --git a/arch/mips/ath79/mach-linino-freedog.c b/arch/mips/ath79/mach-linino-freedog.c
new file mode 100644
index 0000000..3c300fc
--- /dev/null
+++ b/arch/mips/ath79/mach-linino-freedog.c
@@ -0,0 +1,11 @@
+/*
+ * Copyright (c) dog hunter AG - Zug - CH
+ * General Public License version 2 (GPLv2)
+ * Author Federico Vaga <federicov@linino.org>
+ */
+
+#define LININO_FREEDOG 1
+
+#include "mach-linino.c"
+
+MIPS_MACHINE(ATH79_MACH_LININO_FREEDOG, "linino-freedog", "Linino Freedog", ds_setup);
diff --git a/arch/mips/ath79/mach-linino-yun.c b/arch/mips/ath79/mach-linino-yun.c
new file mode 100644
index 0000000..63d4d42
--- /dev/null
+++ b/arch/mips/ath79/mach-linino-yun.c
@@ -0,0 +1,13 @@
+/*
+ * Copyright (c) dog hunter AG - Zug - CH
+ * General Public License version 2 (GPLv2)
+ * Author Federico Vaga <federicov@linino.org>
+ */
+
+#define LININO_YUN 1
+
+#include "mach-linino.c"
+
+MIPS_MACHINE(ATH79_MACH_LININO_YUN, "linino-yun", "Arduino Yun", ds_setup);
+MIPS_MACHINE(ATH79_MACH_LININO_ONE, "linino-one", "Linino One", ds_setup);
+MIPS_MACHINE(ATH79_MACH_LININO_YUN_MINI, "linino-yun-mini", "Arduino Yun-Mini", ds_setup);
diff --git a/arch/mips/ath79/mach-linino.c b/arch/mips/ath79/mach-linino.c
new file mode 100644
index 0000000..2707fe9
--- /dev/null
+++ b/arch/mips/ath79/mach-linino.c
@@ -0,0 +1,297 @@
+/*
+ *  Linino board support
+ *
+ *  Copyright (C) 2011-2012 Gabor Juhos <juhosg@openwrt.org>
+ *
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License version 2 as published
+ *  by the Free Software Foundation.
+ */
+
+#include "dev-eth.h"
+#include "dev-gpio-buttons.h"
+#include "dev-leds-gpio.h"
+#include "dev-m25p80.h"
+#include "dev-spi.h"
+#include "dev-usb.h"
+#include "dev-wmac.h"
+#include "machtypes.h"
+#include <asm/mach-ath79/ar71xx_regs.h>
+#include <asm/mach-ath79/ath79.h>
+#include <asm/mach-ath79/mach-linino.h>
+#include "common.h"
+#include "gpio.h"
+#include "linux/gpio.h"
+#include <linux/platform_device.h>
+#include <linux/spi/spi_gpio.h>
+
+/* * * * * * * * * * * * * * * * * * * LED * * * * * * * * * * * * * * * * * */
+
+static struct gpio_led ds_leds_gpio[] __initdata = {
+#if defined(LININO_ONE_PLUS)
+        {
+                .name = "rgb:blue",
+                .gpio = DS_GPIO_RGB_LED_BLUE,
+                .active_low = 0,
+        },
+        {
+                .name = "rgb:red",
+                .gpio = DS_GPIO_RGB_LED_RED,
+                .active_low = 0,
+        },
+        {
+                .name = "rgb:green",
+                .gpio = DS_GPIO_RGB_LED_GREEN,
+                .active_low = 0,
+        },
+#else
+	{
+		.name = "usb",
+		.gpio = DS_GPIO_LED_USB,
+		.active_low = 0,
+	},
+	{
+		.name = "wlan",
+		.gpio = DS_GPIO_LED_WLAN,
+		.active_low = 0,
+	},
+#endif
+#if defined(LININO_CHIWAWA)
+	{
+		.name = "ds:green:lan0",
+		.gpio = DS_GPIO_LED2,
+		.active_low = 0,
+		.default_trigger = "netdev"
+	},
+	{
+		.name = "ds:green:lan1",
+		.gpio = DS_GPIO_LED4,
+		.active_low = 0,
+		.default_trigger = "netdev"
+	},
+#endif
+};
+
+/* * * * * * * * * * * * * * * * * BUTTONS * * * * * * * * * * * * * * * * * */
+
+static struct gpio_keys_button ds_gpio_keys[] __initdata = {
+	{
+		.desc = "configuration button",
+		.type = EV_KEY,
+		.code = KEY_WPS_BUTTON,
+		.debounce_interval = DS_KEYS_DEBOUNCE_INTERVAL,
+		.gpio = DS_GPIO_CONF_BTN,
+		.active_low = 1,
+	},
+};
+
+
+/* * * * * * * * * * * * * * * * * * * SPI * * * * * * * * * * * * * * * * * */
+
+/*
+ * The SPI bus between the main processor and the MCU is available only in the
+ * following board: YUN, FREEDOG
+ */
+
+static struct spi_gpio_platform_data spi_bus1 = {
+	.sck = LININO_GPIO_SPI_SCK,
+	.mosi = LININO_GPIO_SPI_MOSI,
+	.miso = LININO_GPIO_SPI_MISO,
+	.num_chipselect = LININO_N_SPI_CHIP_SELECT,
+};
+
+static struct platform_device linino_spi1_device = {
+	.name	= "spi_gpio",
+	.id	= 1,
+	.dev.platform_data = &spi_bus1,
+};
+
+/* SPI devices on Linino */
+static struct spi_board_info linino_spi_info[] = {
+	/*{
+		.bus_num		= 1,
+		.chip_select		= 0,
+		.max_speed_hz		= 10000000,
+		.mode			= 0,
+		.modalias		= "spidev",
+		.controller_data	= (void *) SPI_CHIP_SELECT,
+	},*/
+	{
+		.bus_num		= 1,
+		.chip_select		= 0,
+		.max_speed_hz		= 10000000, /* unused but required */
+		.mode			= 0,
+		.modalias		= "atmega32u4",
+		.controller_data	= (void *) LININO_GPIO_SPI_CS0,
+		.platform_data		= (void *) LININO_GPIO_SPI_INTERRUPT,
+	},
+};
+
+/**
+ * Enable the software SPI controller emulated by GPIO signals
+ */
+static void ds_register_spi(void) {
+	pr_info("mach-linino: enabling GPIO SPI Controller");
+
+	/* Enable level shifter on SPI signals */
+	gpio_set_value(DS_GPIO_OE, 1);
+	/* Enable level shifter on AVR interrupt */
+	gpio_set_value(DS_GPIO_OE2, 1);
+	/* Register SPI devices */
+	spi_register_board_info(linino_spi_info, ARRAY_SIZE(linino_spi_info));
+	/* Register GPIO SPI controller */
+	platform_device_register(&linino_spi1_device);
+}
+
+
+/* * * * * * * * * * * * * * * * * * SETUP * * * * * * * * * * * * * * * * * */
+
+static void __init ds_common_setup(void)
+{
+	static u8 mac[6];
+
+	u8 *art = (u8 *) KSEG1ADDR(0x1fff0000);
+	ath79_register_m25p80(NULL);
+
+	if (ar93xx_wmac_read_mac_address(mac)) {
+		pr_info("%s-%d: MAC:%x:%x:%x:%x:%x:%x\n", __FUNCTION__, __LINE__, mac[5], mac[4], mac[3], mac[2], mac[1], mac[0]);
+		ath79_register_wmac(NULL, NULL);
+	} else {
+		ath79_register_wmac(art + DS_CALDATA_OFFSET,
+				art + DS_WMAC_MAC_OFFSET);
+		memcpy(mac, art + DS_WMAC_MAC_OFFSET, sizeof(mac));
+		pr_info("%s-%d: wlan0 MAC:%x:%x:%x:%x:%x:%x\n", __FUNCTION__, __LINE__, mac[5], mac[4], mac[3], mac[2], mac[1], mac[0]);
+
+	}
+	// Mapping device-inteface
+	// ag71xx.1 --> eth0	[ath79_eth1_data]
+	// ag71xx.0 --> eth1	[ath79_eth0_data]
+
+	if ((mac[3] & 0x08)==0) {
+                mac[3] |= 0x08;
+                ath79_init_mac(ath79_eth0_data.mac_addr, mac, 0);
+		pr_info("%s-%d: eth1 MAC:%x:%x:%x:%x:%x:%x\n", __FUNCTION__, __LINE__, mac[5], mac[4], mac[3], mac[2], mac[1], mac[0]);
+
+                mac[3] &= 0xF7;
+                ath79_init_mac(ath79_eth1_data.mac_addr, mac, 0);
+		//pr_info("%s-%d: eth0 MAC:%x:%x:%x:%x:%x:%x\n", __FUNCTION__, __LINE__, mac[5], mac[4], mac[3], mac[2], mac[1], mac[0]);
+
+	}else{
+		mac[3] |= 0x08;
+		ath79_init_mac(ath79_eth1_data.mac_addr, mac, 0);
+		//pr_info("%s-%d: eth0 MAC:%x:%x:%x:%x:%x:%x\n", __FUNCTION__, __LINE__, mac[5], mac[4], mac[3], mac[2], mac[1], mac[0]);
+
+		mac[3] &= 0xF7;
+		ath79_init_mac(ath79_eth0_data.mac_addr, mac, 0);
+		pr_info("%s-%d: eth1 MAC:%x:%x:%x:%x:%x:%x\n", __FUNCTION__, __LINE__, mac[5], mac[4], mac[3], mac[2], mac[1], mac[0]);
+	}
+
+	ath79_register_mdio(0, 0x0);
+
+	/* LAN ports */
+	ath79_register_eth(1);
+
+	/* WAN port */
+	ath79_register_eth(0);
+}
+
+/*
+ * Enable level shifters
+ */
+static void __init ds_setup_level_shifter_oe(void)
+{
+	int err;
+
+	/* enable OE of level shifter */
+	pr_info("Setting GPIO OE %d\n", DS_GPIO_OE);
+	err = gpio_request_one(DS_GPIO_OE,
+			       GPIOF_OUT_INIT_LOW | GPIOF_EXPORT_DIR_FIXED,
+			       "OE-1");
+	if (err)
+		pr_err("mach-linino: error setting GPIO OE\n");
+
+	#if defined(LININO_FREEDOG)
+        /* enable SWD_OE to be low as default */
+        pr_info("Setting GPIO SWD OE %d\n", DS_GPIO_SWD_OE);
+        err= gpio_request_one(DS_GPIO_SWD_OE,
+                              GPIOF_OUT_INIT_LOW | GPIOF_EXPORT_DIR_FIXED,
+                              "SWD_OE");
+        if (err)
+                pr_err("mach-linino: error setting GPIO SWD_OE\n");
+
+        /* enable SWD_EN to be low as default */
+        pr_info("Setting GPIO SWD EN %d\n", DS_GPIO_SWD_EN);
+        err= gpio_request_one(DS_GPIO_SWD_EN,
+                              GPIOF_OUT_INIT_LOW | GPIOF_EXPORT_DIR_FIXED,
+                              "SWD_EN");
+        if (err)
+                pr_err("mach-linino: error setting GPIO SWD_EN\n");
+	#else
+
+        /* enable OE2 of level shifter */
+        pr_info("Setting GPIO OE2 %d\n", DS_GPIO_OE2);
+        err= gpio_request_one(DS_GPIO_OE2,
+                              GPIOF_OUT_INIT_LOW | GPIOF_EXPORT_DIR_FIXED,
+                              "OE-2");
+        if (err)
+                pr_err("mach-linino: error setting GPIO OE2\n");
+	#endif
+}
+
+
+/*
+ * Enable UART
+ */
+static void ds_setup_uart_enable(void)
+{
+	int err;
+
+	pr_info("Setting GPIO UART-ENA %d\n", DS_GPIO_UART_ENA);
+	err = gpio_request_one(DS_GPIO_UART_ENA,
+			       DS_GPIO_UART_POL | GPIOF_EXPORT_DIR_FIXED,
+			       "UART-ENA");
+	if (err)
+		pr_err("mach-linino: error setting GPIO Uart Enable\n");
+}
+
+
+static void __init ds_setup(void)
+{
+	u32 t=0;
+
+	ds_common_setup();
+
+	ath79_register_leds_gpio(-1, ARRAY_SIZE(ds_leds_gpio), ds_leds_gpio);
+	ath79_register_gpio_keys_polled(-1, DS_KEYS_POLL_INTERVAL,
+			ARRAY_SIZE(ds_gpio_keys), ds_gpio_keys);
+	ath79_register_usb();
+
+	// use the swtich_led directly form sysfs
+	ath79_gpio_function_disable(AR933X_GPIO_FUNC_ETH_SWITCH_LED0_EN |
+	                            AR933X_GPIO_FUNC_ETH_SWITCH_LED1_EN |
+	                            AR933X_GPIO_FUNC_ETH_SWITCH_LED2_EN |
+	                            AR933X_GPIO_FUNC_ETH_SWITCH_LED3_EN);
+
+	/*
+	 * Disable the Function for some pins to have GPIO functionality active
+	 * GPIO6-7-8 and GPIO11
+	 */
+	ath79_gpio_function_setup(GPIO_FUNC_SET, GPIO_FUNC_CLEAR);
+
+	ath79_gpio_function2_setup(GPIO_FUNC2_SET, GPIO_FUNC2_CLEAR);
+
+	pr_info("mach-linino: setting GPIO\n");
+
+	/* Enable GPIO26 instead of MDC function */
+	t = ath79_reset_rr(AR933X_RESET_REG_BOOTSTRAP);
+	t |= AR933X_BOOTSTRAP_MDIO_GPIO_EN;
+	ath79_reset_wr(AR933X_RESET_REG_BOOTSTRAP, t);
+
+	/* enable OE of level shifters */
+	ds_setup_level_shifter_oe();
+	/* enable uart */
+	ds_setup_uart_enable();
+
+	/* Register Software SPI controller */
+	ds_register_spi();
+}
diff --git a/arch/mips/include/asm/mach-ath79/mach-linino.h b/arch/mips/include/asm/mach-ath79/mach-linino.h
new file mode 100644
index 0000000..644435a
--- /dev/null
+++ b/arch/mips/include/asm/mach-ath79/mach-linino.h
@@ -0,0 +1,84 @@
+/*
+ * Copyright (c) dog hunter AG - Zug - CH
+ * General Public License version 2 (GPLv2)
+ * Author Federico Vaga <federicov@linino.org>
+ */
+
+#ifndef MACH_LININO_H_
+#define MACH_LININO_H_
+
+#if defined(LININO_FREEDOG)
+	#define GPIO_FUNC_SET (AR933X_GPIO_FUNC_JTAG_DISABLE | \
+				AR933X_GPIO_FUNC_I2S_MCK_EN)
+	#define GPIO_FUNC_CLEAR (AR933X_GPIO_FUNC_SPDIF_EN | \
+				AR933X_GPIO_FUNC_I2SO_EN | \
+				AR933X_GPIO_FUNC_UART_RTS_CTS_EN)
+	#define GPIO_FUNC2_SET (AR933X_GPIO_FUNC2_JUMPSTART_DISABLE | \
+				AR933X_GPIO_FUNC2_WPS_DISABLE | \
+				AR933X_GPIO_FUNC2_DIS_MIC)
+	#define GPIO_FUNC2_CLEAR (AR933X_GPIO_FUNC2_I2SD_ON_12)
+#else
+	#define GPIO_FUNC_SET (AR933X_GPIO_FUNC_JTAG_DISABLE | \
+				AR933X_GPIO_FUNC_I2S_MCK_EN)
+	#define GPIO_FUNC_CLEAR (0)
+	#define GPIO_FUNC2_SET (AR933X_GPIO_FUNC2_JUMPSTART_DISABLE)
+	#define GPIO_FUNC2_CLEAR (0)
+#endif
+
+#define DS_GPIO_LED0			0
+#define DS_GPIO_LED1			1
+#define DS_GPIO_LED2			13
+#define DS_GPIO_LED3			14
+#define DS_GPIO_LED4			15
+#define DS_GPIO_LED5			16
+
+#define DS_GPIO_RGB_LED_BLUE            DS_GPIO_LED0       
+#define DS_GPIO_RGB_LED_RED             DS_GPIO_LED1
+#define DS_GPIO_RGB_LED_GREEN           DS_GPIO_LED3
+#define DS_GPIO_LED_WLAN             	DS_GPIO_LED0
+#define DS_GPIO_LED_USB            	DS_GPIO_LED1       
+
+#define DS_GPIO_OE			21
+#define DS_GPIO_OE2			22
+#define DS_GPIO_MCU_RESET		18
+#define DS_GPIO_UART_ENA		23
+#define DS_GPIO_CONF_BTN	20
+
+/* Configure level shifter enable GPIO */
+#if defined(LININO_FREEDOG)
+	#define DS_GPIO_SWD_EN		12
+	#define DS_GPIO_SWD_OE		11
+	#define DS_GPIO_UART_POL 	GPIOF_OUT_INIT_HIGH
+#else	/* YUN */
+	#define DS_GPIO_UART_POL        GPIOF_OUT_INIT_LOW
+#endif
+
+#define DS_KEYS_POLL_INTERVAL		20	/* msecs */
+#define DS_KEYS_DEBOUNCE_INTERVAL	(3 * DS_KEYS_POLL_INTERVAL)
+
+#define DS_MAC0_OFFSET			0x0000
+#define DS_MAC1_OFFSET			0x0006
+#define DS_CALDATA_OFFSET		0x1000
+#define DS_WMAC_MAC_OFFSET		0x1002
+
+/* SPI GPIOs */
+
+#if defined(LININO_FREEDOG)
+	#define	LININO_GPIO_SPI_SCK	7
+#else	/* YUN */
+	#define	LININO_GPIO_SPI_SCK	11
+#endif
+
+#define	LININO_N_SPI_CHIP_SELECT	1
+#define	LININO_GPIO_SPI_MOSI		27
+#define	LININO_GPIO_SPI_MISO		8
+#define LININO_GPIO_SPI_CS0		26
+
+// HANDSHAKE signal
+#if defined(LININO_FREEDOG)
+	#define LININO_GPIO_SPI_INTERRUPT		23
+#else
+	#define LININO_GPIO_SPI_INTERRUPT		19
+#endif
+
+#endif /* MACH_LININO_H_ */
-- 
2.10.1

